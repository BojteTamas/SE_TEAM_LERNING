7/Mar/22
checkout branch master
create new branch Task01
add and commit new txt file to new branch

2nd game recap:
git commit, git branches, git branches and merging, git rebase
git checkout -b <newbranchname> -to create and checkout the new branch at the same time

Merge:
to merge main into bugFix branch --> git checkout bugFix
                                 --> git merge main

 Exercise:
 make a new branch called bugFix
 checkout the bugFix branch
 commit once
 go back to main with checkout
 commit another time
 merge the bugFix branch into main with git merge

 Solution:
 git checkout -b bugFix
 git commit
 git checkout main
 git commit
 git merge bugFix

 Git Rebase:
 git rebase main or git rebase bugFix

 Exercise:
 checkout a new branch named bugFix
 commit once
 go back to main and commit again
 checkout bugFix again and rebase onto main

 Solution:
 git checkout -b bugFix
 git commit
 git checkout main
 git commit
 git checkout bugFix
 git rebase main

 09.03.2022
 Relative refs
 ^ -> moving upwards one commit at the time
 -<num> -> moving upwards a number of times
 main^ -> the equivalent of first parent of main
 git checkout main^
 git checkout HEAD~4 - > puts the head 4 commits back
  Revert and Reset :
  git reset HEAD~1
  git checkout pushed
  git revert HEAD

  Git cherry pick intro  and Interactive Rebase Intro
  git cherry pick <Commit1> <Commit2> <...>
  git cherry pick C2 C4

  git rebase -i HEAD~4 -> git copies down commits in the exact order the user specifies
  git rebase -i overHere -> rearrange C3 C5 C4

Task03_10/Mar/22 - Juggling commits

git rebase -i main
git rebase bugFix main C2/C3 commits omitted and C4 selected

git rebase -i HEAD~2  -> ordering C2,C3 commits

''Rebasing over 9000 times

git rebase main bugFix
git rebase bugFix side
git rebase side another
git rebase another main

''Multiple parents

git checkout HEAD~
git checkout HEAD^2
git checkout HEAD~2

modifiers chained together: git checkout HEAD~^2~2
git branch bugWork main^^2^

''Branch spaghetti

git checkout one
git cherry-pick C4 C3 C2
git checkout two
git cherry-pick C5 C4 C3 C2
git branch -f three C2

=======
14/Mar/22
Starting learning Jabva on codegym
declaring variables : integer, string, double
system.out.print - displays the output on the same line in console
system.out.println - displays the output on different lines
1 class can contain multiple methods
2 variables with the same name can only be defined in different methods, never in the same method
->progress until Lesson5


15/Mar/22
''"In Java, you can write commands, but you can also add comments to those commands right in the code.
''The compiler completely ignores the comments. When the program is run, all the comments are omitted."
public class Home
{
    public static void main(String[] args)
    {
        /*
        Now we'll display the phrase 'Amigo Is The Best' on the screen
        */
        System.out.print("Amigo ");
        System.out.print("Is ");
        System.out.print("The ");
        System.out.print("Best");
    }
}

OR

public class Home
{
    public static void main(String[] args)
    {
        System.out.print("Amigo ");
        System.out.print("Is The "); // This is also a comment
        System.out.print("Best");
    }
}

Learned about:
Variables
Displaying text on the screen
int and String types
The difference between compiling in Java and other languages
Adding comments in code and why we need them

Progress until Lvl 2 - Lesson 0

15/Mar/22
Progress until lvl 3 -lesson 0
Memory and variables
Ints and strings
Keyboard input
Enter a number
convert an integer to string via Integer.ParseInt
length of a string: Syntax. int length = stringName.length();
to read data from the console(keyboard) the standard class used is Scan
you can enter a string from the keyboard and from a scanner with: scanner.nextLine();
you can enter a number from the keyboard using a Scanner object with: scanner.nextInt();

16/Mar/22
Recap lessons:

*variables are special entities used to store data
*variables have 3 important properties: type, name and value
int a => create an int variable named a;
string s => create a string variable named s;
double c => create a double variable named c;
Doubles are fractional or real numbers

Assignment:
i=3; a=1; b= a+1;
x=3;
x=x+1;

Compilers:
Program in Java => Java compiler => Special platform-independent code(bytecode) => JVM => Machine code
JVM = JAva Virtual Machine => it complies the bytecode into machine code before the program is executed

/*
Now we'll display the phrase "Bla bla bla" on the screen.
*/ -> when the program is compiled the compiler omits everything between the symbols
// -> this is also a comment

**When a variable is declared in code, a bit of memory that isn't already being used is assigned to it.
**This is usually a few bytes. Declaring a variable requires that you indicate the type of information the program will store in it: numbers, text or other data.
**For convenience, a unique name is assigned to each variable.

**There are two major types in Java: String and int.
**We store strings/text in String, and integers (whole numbers) in int. To declare a new variable, you need to specify its type and name.
**The name cannot be the same as the names of any other variables and/or functions.

**To assign a new value to a variable, we use the = sign. It is also called the 'assignment operator'.
**Assignment means to place into a variable a value from another variable or one computed from several variables.

Keyboard input:
Example 1
Input a string and number from the keyboard
InputStream inputStream = System.in;
Reader inputStreamReader = new InputStreamReader(inputStream);
BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

String name = bufferedReader.readLine(); //Read a string from the keyboard
String sAge = bufferedReader.readLine(); //Read a string from the keyboard
int nAge = Integer.parseInt(sAge); //Convert the string to a number.
Example 2
A more compact version of the previous example:
BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

String name = reader.readLine();
String sAge = reader.readLine();
int nAge = Integer.parseInt(sAge);
Example 3
Even more compact
Scanner scanner = new Scanner(System.in);
String name = scanner.nextLine();
int age = scanner.nextInt();


