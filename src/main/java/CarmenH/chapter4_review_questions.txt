=========================================================================================
1. B C correct
=========================================================================================
2. A D correct
=========================================================================================

3. C D - missing A - A C D

Options A and C are correct because a void method is allowed to have a return statement as long as it doesnâ€™t try to return a value.

return; - does not return something, works with void
=========================================================================================
4. A B G correct
=========================================================================================

5. F G - D G

D. howMany(true, true, true) - > Option D passes the initial parameter plus two more to turn into a vararg array of size 2

G. hoMany(true, new boolean[2]); - > Option G passes the initial parameter plus an array of size 2.  


A. howMany() ---Option A does not compile because it does not pass the initial parameter. 

E. howMany(true, {true}); Options E and F do not compile because they do not declare an array properly. It should be new boolean[] {true}. 
F. howMany(true, {true, true});

B. howMany(true);   ---> Option B creates a vararg array of size 0 

C. howMAny(true, true); ---> option C creates a vararg array of size 1.
=========================================================================================

6. B C - D

D. Option D is correct. 
"You can use access modifiers to allow read access to all methods, but not any instance variables."
This is the common implementation for encapsulation by setting all fields to be private and all methods to be public. 
Option A is incorrect because protected access allows everything that package private access allows and additionally allows subclasses access. 
Option B is incorrect because the class is public. This means that other classes can see the class. However, they cannot call any of the methods or read any of the fields. It is essentially a useless class. 
Option C is incorrect because package private access applies to the whole package. 
Option E is incorrect because Java has no such capability.
=========================================================================================


7. D - but not sure - B C D F
Lines 5 6 7 9 
Only the line with public compiles


=========================================================================================
8. C E - B C E
B. Encapsulation uses private instance variables
=========================================================================================
9. A C - C E

A. Public Boolean getCanSwim() { return canSwim;) - wrong because the property is of type boolean and getters must begin with is for booleans. 

Correct is E: 
public void setCanSwim(boolean b) { canSwim = b; }
=========================================================================================
10. D - B
Rope runs line 3, setting LENGTH to 5, then immediately after runs the static initial- izer, which sets it to 10. Line 5 calls the static method normally and prints swing. Line 6 also calls the static method. Java allows calling a static method through an instance variable. Line 7 uses the static import on line 2 to reference LENGTH.
=========================================================================================
11. C F - did not know... - B E

I answered that are 2 compilers error - but it was just one
I thought because off null that we will have a NullPointerException thrown but a null object reference variable is allowed to access a static class variable without throwing an exception either at compile or run time.
Instead - removing the error we would got "swing swing "
=========================================================================================
12. E -no idea - D 

RopeSwing has an instance initializer and not a static initializer
Since RopeSwing is never constructed, the instance initializer does not run

The other detail is that length is static. Changes from one object update this common static variable.
----more search to understand the explanations too

The trick is that length in class Rope is static.  That means there is only one copy per class.  So rope1 and rope2 point to the same value in Rope.

This is the instance initializer: - this also is never executed
{
    System.out.println(rope1.length);
}

There is no contructor so Java implements default constructor:
RopeSwing() {}

RopeSwing ropeSwing = new RopeSwing(); ---this is never executed; Since no instance (object), no instance initializer.

Very good explanation to understand this:
https://coderanch.com/t/677988/certification/Static

=========================================================================================
13. D -  E
I missed one compilation error
=========================================================================================
14. E F - B
Very very bad:
Always import, then static!!!

Option A is incorrect because you can only do a static import on static members. Classes such as Collections require a regular import-- I don't understand this - searched for more details but nothing found.
!!!!!!!!!!!!!!!!!!!!!!

=========================================================================================
15. D - E

I chose float instead of object, let's see where is my mistake:
It was double, not float. ROOKIE

=========================================================================================
16. C or D - B

Got it - not paying attention on what the program was printing :(

=========================================================================================
17. A B E  - B D E
Mistake at A = not knowing it wasn't affecting the caller

=========================================================================================
18. B C - really don't know - C G

this() may only be called as the first line of a constructor.

this.variableName can be called from any instance method to refer to an instance variable.

It cannot be called from a static method because there is no instance of the class to refer to.

this() can only be called from a constructor in the same class.

Which of the following are true? (Choose 2)
A. this() can be called from anywhere in a constructor.
B. this() can be called from any instance method in the class.

C. this.variableName can be called from any instance method in the class.

D. this.variableName can be called from any static method in the class.
E. You must include a default constructor in the code if the compiler does not include one.
F. You can call the default constructor written by the compiler using this().

G. You can access a private constructor with the main() method.

=========================================================================================
19. D G - A G

Wrong : public class Bird { public Bird() {} } // here is defined

public class Bird { }
public class Bird { void Bird() { }
=========================================================================================
20. A B - E
Options A and B will not compile because constructors cannot be called without new. --- this was my mistake
Options C and D will compile but will create a new object rather than setting the fields in this one.
Option F will not compile because this() must be the first line of a constructor.
Option E is correct. using this(2) to access the constructor with int param

=========================================================================================
21. C correct
=========================================================================================
22. G  - E
=========================================================================================
23. C - A
=========================================================================================
24. C F - B C E
=========================================================================================
25. A - A E
=========================================================================================
26. A correct
=========================================================================================
27. C correct
=========================================================================================
28. A F - A D F
=========================================================================================
29. F -  A F
=========================================================================================


6 from 29