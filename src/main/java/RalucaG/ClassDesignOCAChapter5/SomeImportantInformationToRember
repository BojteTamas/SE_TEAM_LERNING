    *If the parent class has more than one constructor, the child class may use any valid
    *parent constructor in its definition;
    *the use of the extends => the subclasses will be able to inherit all the properties of the superclass
    *except for the private properties of the superclass.
    *use the instanceof operator => to determine whether Labrador is actually an Animal, and dog is actually an Animal.

   * extends Object is implicit as public class Student java.lang.Object is the only class that
   * doesn't have parent classes when Java sees you define a class that doesn’t extend another
   * class, it immediately adds the syntax extends java.lang.Object to the class defi nition if you
   * look at the inheritance structure of any class, it will always end with java.lang.Object on the
   * top of the tree.

     * Things cool to remember: super() -> method used to call superclass methods(parent methods),
     * and to access the superclass constructor(parent class constructor). super() acts as immediate
     * parent class constructor and should be first line in child class constructor. this() acts as
     * current class constructor and can be used in parametrized constructors keyword used for
     * inheritance is extends.
17.06.2022
    *Java compiler automatically inserts a call to the no-argument constructor super()
    *if the first statement is not a call to the parent constructor.

    **Calling Inherited Class Members
    *Java classes may use any public or protected member of the parent class, including methods, primitives, or object references.
    *If the parent class and child class are part of the same package, the child class may also use any default members defined in the parent class.
    *a child class may never access a private member of the parent class, at least not through any direct reference.
    *in DrHouseExample class:we are not accessing the data members directly we are using public getter method to access the private members of parent class
    *Inheriting a class grants us access to the public and protected members of the parent class, but also sets the stage for collisions between methods defi ned in both the parent class and the subclass.
 **Types of Inheritance:
    *single inheritance: child and parent class relationship, where a class extends the another class
        **multilvl inheritance:  child and parent class relationship,where a class extends the child class
        **hierarchical inheritance: child and parent class relationship where more than one class extends the same class (Labrador dog example)
    *multiple inheritance: class extends more than one class, 1 child class -2 parent classes
        **hybrid inheritance: combo of multiple types of inheritance
  **Overriding a method:
    *method defined in both the parent and child class->you can override a method a method by declaring a new method with the signature and return type as the method in the parent class.
            **example dogs + wolfs (dogs also is child of AnimalPlanet)


 20.06.2022
 Redeclaring private Methods
     ** In java it's not possible to override a private method in a parent class since the parent class is not accessible from the child class;
      child class can define it's own version of the method that it's declared in parent class;
    **  isBiped() returns false in the parent class and true in the child class. In the first method call, the parent method getMadagascarAnimals() is used. The
      Madagascar class only knows about isBiped() from its own class definition, so it outputs false. In the second method call, the child executes a method of isBiped(), which hides
      the parent method’s version and returns true;

Creating final methods
    ** final methods cannot be overridden
    **you can create a method with the final keyword but the child class cannot override this method;
    **cannot hide a sttic method in a parent class if it's marked as final
    **Parrots: if we write is as public final boolean --> it wont' compile and it cannot override the parent method, if we declare it as public boolean --compiles;
    **final is a non-access modifier applicable only to a variable, a method, or a class.
    ** final variable => create constant variable
    **final methods => prevent method overriding
    **final classes => prevent inheritance

Inheriting Variables and Hiding Variables
    ** Java doesn’t allow variables to be overridden but instead hidden
    ** when hiding a variable you just define a variable with the same name as a var in parent class;
    **it creates 2 copies of the var within an instance of the child class:one instance for the parent reference and another for the child reference
21.06.2022
Abstract classes
    **An abstract class is a class that is marked with the abstract keyword and cannot be instantiated.
    **An abstract method is a method marked with the abstract keyword defined in an abstract class, for which no implementation is provided in the class in which it is declared.
    **an abstract class may include nonabstract methods and variables
    **Although an abstract class doesn’t have to implement any abstract methods, an abstract method may only be defined in an abstract class
    **A method-defined abstract must always be redefined in the subclass, thus making overriding compulsory or making the subclass itself abstract.
    **Any class that contains one or more abstract methods must also be declared with an abstract keyword.
    **There can be no object of an abstract class. That is, an abstract class can not be directly instantiated with the new operator.
    **An abstract class can have parameterized constructors and the default constructor is always present in an abstract class.
    **base class is geometricalShapes , each geoshape has a size,color,width and length.
    ** from this we inherit different types like circle and rectangle that can also have different characteristics
    **A factory method is a method that returns the instance of the class: draw method of circle and rectangle class will be invoked;
    **the type hierarchy contains the similarities but also the differences between the geo shapes
    **Although you can’t provide a default implementation to an abstract method in an abstract class, you can still define a method with a body—you just can’t mark it as abstract.
    **As long as you do not mark it as final, the subclass still has the option to override it.

22.06.2022
Implementing Interfaces
    **java allows classes to implement multiple number of interfaces;
    **an interface is an abstract data type that defines a list of abstract public methods that the class implementing the interface must provide;
    **interface can include:constant variables, default methods;
    **a class invokes the interface by using the implements keyword in its class definition

Defining an Interface
    **interfaces cannot be instantiated directly;
    **interface not required to have any methods;
    **interface may not be declared as final;
    **interfaces have public or default access and they must include the abstract modifier;
    **!!! Interfaces as private,protected or final will trigger a compiler error--this is incompatible and will trigger errors;
    **all nondefault methods in the interface are assumed to have the modifiers abstract and public in their definition;

Inheriting an Interface
    **an interface that extends another interface as well as an abstract class that implements an interface, inherits all of the abstract methods as its own abstract methods;
    **concrete class that implements an interface or extends an abstract class that implements an interface-->provide implementation for all the inherited abstract methods;

Classes,Interfaces and Keywords
    **a class can implement but not extend an interface;
    **an interface can extend another interface but cannot implement another interface;

Abstract Methods and Multiple Inheritance
    **a class that inherits from two interfaces that contain the same abstract method=>if the abstract interface methods have identical behavior then creating a class that implements
    **one of the two methods automatically implements the second methods;
    **if the method name is the same but the input param are different then this is a method overload, the class that implements both interfaces must provide implements of both versions of the same name methods because they are considerate separate methods;

23.06.2022
Interface variables + Default Methods + Default Methods and Multiple Inheritance
    **interface variables are public,static and final -- no private or protected=> results error compiler;
    **default methods withing an interface = abstract method with a default implementation; classes might be able to override the default method if needed;
    **A default method may only be declared within an interface and not within a class or abstract class;
    **A default method must be marked with default keyword and needs a method body;
    **not assumed to be static,final or abstract it might be used or overridden by a class that implements that interface;
    **default method must be public and will not comile if private or protected;

Understanding Polymorphism
    **a Java object may be accessed using a reference with the same type as the object, a reference that is a superclass of the object, or a reference that defines an interface the object implements, either directly or through a superclass
    **Polymorphism allows us to perform a single action in different ways. In other words, polymorphism allows you to define one interface and have multiple implementations. The word “poly” means many and “morphs” means forms, So it means many forms
    ** 2 types of polymorphism: compile-time and runtime;
    **compile-time polymorphism: is static polymorphism; acheived by overloading a function or an operator;
    **runtime polymorphism: dynamic method dispatch, a function call to the overriden method is resolved at runtime --> done by method overriding;

24.06.2022
Object vs Reference
    **The type of the object determines which properties exist within the object in memory
    **The type of the reference to the object determines which methods and variables are accessible to the Java program.
    ** rules for casting variables: ***casting an object from a subclass to a superclass doesn't need an explicit cast;
                                    ***casting an object from a superclass to a subclass requires an explicit cast;
                                    ***compiler won't work with casts to unrelated types;[see primate primate = lemur eg]
                                    ***compile without issue but an exception might be thrown at runtime if the object cast it's not an instance of that class
Virtual Methods
    **most important feature of polymorphism - to support virtual methods;
    **virtual method = method in which the specific implementation is not determined until runtime;
    **all non-final,static and non-private methods are considered virtual methods - because they can be overriden at runtime;

Polymorphic parameters:
    **useful applications of polymorphism is the ability to pass instances of a subclass or interface to a method.
    **you can define a method that takes an instance of an interface as a parameter;
    **If you’re defining a method that will be accessible outside the current class, either to subclasses of the current class or publicly to objects outside the current class
    **it is considered good coding practice to use the superclass or interface type of input parameters whenever possible. !!!

27.06.2022
Quiz Review:
Q1:B-interface methods are public; Q2: E-because it doesn't use the super method;
Q3:A,B,D,E - all of them extend either Frog or the interface; Q4:E=> incorrect it was C + E;
Q5:A,D,F => incorrect it was A+D+E+F; Q6:D; Q7:B,C;Q8: F;
Q9:A; Q10:B,C,E,F; Q11:A,D,E; Q12:B - it calls to isBlind from child method not interface, overrides interf method;
Q13:A; Q14:C; Q15:B;Q16:E;Q17:B;Q18:E --cannot be public string and have a int parameter that returns a string;
Q19:A,C => incorrect it was A+C+F; Q20:A;

 Final score: 17/20