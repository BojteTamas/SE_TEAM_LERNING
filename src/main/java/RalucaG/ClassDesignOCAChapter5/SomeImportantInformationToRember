    *If the parent class has more than one constructor, the child class may use any valid
    *parent constructor in its definition;
    *the use of the extends => the subclasses will be able to inherit all the properties of the superclass
    *except for the private properties of the superclass.
    *use the instanceof operator => to determine whether Labrador is actually an Animal, and dog is actually an Animal.

   * extends Object is implicit as public class Student java.lang.Object is the only class that
   * doesn't have parent classes when Java sees you define a class that doesn’t extend another
   * class, it immediately adds the syntax extends java.lang.Object to the class defi nition if you
   * look at the inheritance structure of any class, it will always end with java.lang.Object on the
   * top of the tree.

     * Things cool to remember: super() -> method used to call superclass methods(parent methods),
     * and to access the superclass constructor(parent class constructor). super() acts as immediate
     * parent class constructor and should be first line in child class constructor. this() acts as
     * current class constructor and can be used in parametrized constructors keyword used for
     * inheritance is extends.
17.06.2022
    *Java compiler automatically inserts a call to the no-argument constructor super()
    *if the first statement is not a call to the parent constructor.

    **Calling Inherited Class Members
    *Java classes may use any public or protected member of the parent class, including methods, primitives, or object references.
    *If the parent class and child class are part of the same package, the child class may also use any default members defined in the parent class.
    *a child class may never access a private member of the parent class, at least not through any direct reference.
    *in DrHouseExample class:we are not accessing the data members directly we are using public getter method to access the private members of parent class
    *Inheriting a class grants us access to the public and protected members of the parent class, but also sets the stage for collisions between methods defi ned in both the parent class and the subclass.
 **Types of Inheritance:
    *single inheritance: child and parent class relationship, where a class extends the another class
        **multilvl inheritance:  child and parent class relationship,where a class extends the child class
        **hierarchical inheritance: child and parent class relationship where more than one class extends the same class (Labrador dog example)
    *multiple inheritance: class extends more than one class, 1 child class -2 parent classes
        **hybrid inheritance: combo of multiple types of inheritance
  **Overriding a method:
    *method defined in both the parent and child class->you can override a method a method by declaring a new method with the signature and return type as the method in the parent class.
            **example dogs + wolfs (dogs also is child of AnimalPlanet)


 20.06.2022
 Redeclaring private Methods
     ** In java it's not possible to override a private method in a parent class since the parent class is not accessible from the child class;
      child class can define it's own version of the method that it's declared in parent class;
    **  isBiped() returns false in the parent class and true in the child class. In the first method call, the parent method getMadagascarAnimals() is used. The
      Madagascar class only knows about isBiped() from its own class definition, so it outputs false. In the second method call, the child executes a method of isBiped(), which hides
      the parent method’s version and returns true;

Creating final methods
    ** final methods cannot be overridden
    **you can create a method with the final keyword but the child class cannot override this method;
    **cannot hide a sttic method in a parent class if it's marked as final
    **Parrots: if we write is as public final boolean --> it wont' compile and it cannot override the parent method, if we declare it as public boolean --compiles;
    **final is a non-access modifier applicable only to a variable, a method, or a class.
    ** final variable => create constant variable
    **final methods => prevent method overriding
    **final classes => prevent inheritance

Inheriting Variables and Hiding Variables
    ** Java doesn’t allow variables to be overridden but instead hidden
    ** when hiding a variable you just define a variable with the same name as a var in parent class;
    **it creates 2 copies of the var within an instance of the child class:one instance for the parent reference and another for the child reference
21.06.2022
Abstract classes
    **An abstract class is a class that is marked with the abstract keyword and cannot be instantiated.
    **An abstract method is a method marked with the abstract keyword defined in an abstract class, for which no implementation is provided in the class in which it is declared.
    **an abstract class may include nonabstract methods and variables
    **Although an abstract class doesn’t have to implement any abstract methods, an abstract method may only be defined in an abstract class
    **A method-defined abstract must always be redefined in the subclass, thus making overriding compulsory or making the subclass itself abstract.
    **Any class that contains one or more abstract methods must also be declared with an abstract keyword.
    **There can be no object of an abstract class. That is, an abstract class can not be directly instantiated with the new operator.
    **An abstract class can have parameterized constructors and the default constructor is always present in an abstract class.
    **base class is geometricalShapes , each geoshape has a size,color,width and length.
    ** from this we inherit different types like circle and rectangle that can also have different characteristics
    **A factory method is a method that returns the instance of the class: draw method of circle and rectangle class will be invoked;
    **the type hierarchy contains the similarities but also the differences between the geo shapes
    **Although you can’t provide a default implementation to an abstract method in an abstract class, you can still define a method with a body—you just can’t mark it as abstract.
    **As long as you do not mark it as final, the subclass still has the option to override it.