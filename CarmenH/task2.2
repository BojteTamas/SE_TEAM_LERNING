07March2022



Started again game 1 ohmygit.

LEVEL Intro:

SUBLEVEL Living dangerously:
Add a new lone at the end and all done. (No git commands yet)

SUBLEVEL Making backups
Added a new line on the last file: form2_really_final.txt ( no git commands yet)

SUBLEVEL Enter the time machine : git init - initialize the git repository

SUBLEVEL  The command line: same as previous : git init

SUBLEVEL  Your first commit
$ git add glass
$ git commit -m "my first commit"
Changed the glass file content : "the glass is empty"
$ git commit -m "changed the glass content"


SUBLEVEL  Working together
Got so fast to remote and locally
$ git pull - to bring locally the updates from the remote
Add my name in students file
$ git add students
$ git commit -m "added my name on the list"
$ git push - to send remote my changes

LEVEL files

SUBLEVEL Unexpected Roommates
Remove all files with web in name:
$rm *web
SUBLEVEL Interior design
$ touch chair ( write "yellow" in file )
$ touch table ( write "yellow" in file )

LEVEL branches

SUBLEVEL Moving through time
$ git checkout all commits and added "10 coins" to the last file piggy_bank
$ git add piggy_bank
$git commit -m "pace restored"

SUBLEVEL  Make parallel commits
$git checkout HEAD^
$git checkout HEAD~2
$git add . ; git commit ( add happy to the child file, add something to eat to the lion file"


SUBLEVEL  Creating branches
$git checkout birthday
$git branch birthday ( same for concert)


SUBLEVEL  Branches grow with you!
$ git checkout branch_name
Git reset --hard branch_name ( after checkout on branch name)


SUBLEVEL  Deleting branches
$ git checkout
$ git branch -D branch_name

SUBLEVEL  Moving branches around
$ git reset --hard commit_name ( after git checkout branch_name)
$ git checkout branch_name
$ git add .
$git commit -m "you ate a donut"
==========================================
08March2022 - Task2.3

LEVEL merge
SUBLEVEL Merging timelines
added all 3 in the file
$git add .
$git commit -m "added all 3"
$git merge commit_name_right_clicked
SUBLEVEL Contradictions
did a merge, resolved the conflict and reset hard to change main branch

LEVEL index
SUBLEVEL Step by step
add noise to detector file; used git add ; git commit and git checkout used
SUBLEVEL Add new files to the index
git add filne_name; git commit -m "added new file"
SUBLEVEL Update files in the index
changed something in file; git add filename; git commit -m "changed something in the file"
SUBLEVEL Resseting files in the index
git reset file1; git reset file2; git commit -m "reseted the files"
SUBLEVEL Adding changes step by step
changed all 3 files; git add file; git commit -m "message"; 3 times for each file

LEVEL remotes
SUBLEVEL Friends
git pull; make change - add 3rd line; git add; git commit; git push
once again git pull; make change- add 5th line ; git add; git commit; git push
SUBLEVEL Problems
git add . ; git comit ; git merge; solve conflict; git  add . ; git commit ; git push

LEVEL changing-the-past
SUBLEVEL Rebasing
git checkout main; git rebase last commit on one branch; the next branhc and the 3rd one and done.
SUBLEVEL Reordering events
git cherry-pick and do in order for every item to dress; then reset hard main to the new branch
==========================================
09March2022 - Task2.4

LEVEL shit-happens
SUBLEVEL Restore a deleted file
$git checkout the_deleted_file in the past and commit that ?
SUBLEVEL Restore a file from the past
$ git checkout [commit] [file_name] ; git add . ; git commit -m "got initial file"
SUBLEVEL Undo a bad commit
$ git reset [commit]
SUBLEVEL I pushed something broken
$ git revert [commit]
SUBLEVEL Go back to where you were before ?????
$ git reflog tag/head
$ git checkout [commit]

LEVEL workflows
SUBLEVEL Cloning a repo
$ git clone ../friend
$ git branch solution
$ git add .
$ git commit
$ git tag pr
$ git push


LEVEL bisect
SUBLEVEL Yellow brick road
$ git bisect start
go back and add $ git bisect good if the key is there, and $ git bisect bad if not the key
reset the main to the last good commit

LEVEL Stash
SUBLEVEL Stashing
$git stash push - to put away your changes
SUBLEVEL Pop from Stash
$ git stash pop - to apply your changes
or $ git stash apply to apply changes and keep stash ( did not work)
SUBLEVEL Clear the Stash
inspect stash stack $git stash list
$git stash clear
$git stash drop <stash> a certain stash entry
SUBLEVEL Branch from stash
$ git stash branch <branchname> <stash>
SUBLEVEL Merging popped stash
$git stash pop ; solve conflict; commit; $git stash clear

LEVEL tags
SUBLEVEL Creating tags
$ git tag <tag-name>
SUBLEVEL Removing tags
$ git tag -d <tag-name>
SUBLEVEL Tagging later
$ git tag <tag-name> [commit_ref]
SUBLEVEL Remote Tags
$ git push <remote> <tag-name>  ----- push a tag
$ git push <remote> --tags ----- push all tags
$ git push <remote> --delete <tag-name> ----- deleting tags on your remote works
$ git fetch <remote> --prune -- prune-tags ----- sync
<remote> is friend in the exercise

LEVEL Sandbox
SUBLEVEL Empty sandbox
SUBLEVEL Sandbox with a remote
Here's a sanbox with a remote! try pulling, fetching, or pulling!
How can you push tags and branches on a remote? How can you delete them again?
SUBLEVEL Sandbox with three commits

===========================================================================
10.03.2022 Task 2.5

game2 https://learngitbranching.js.org/

Main tab

Introduction Sequence
1. Introduction to Git Commits
$git commit ; $git commit
2. Branching in Git
$ git checkout -b bugFix
3. Merging in Git
$ git checkout -b bugFix; $ git commit; $ git chekcout main; $git commit; $git merge bugFix
4. Rebase introduction
$ git checkout -b bugFix; $ git commit; $ git checkout main;$ git commit;$ git checkout bugFix; $ git rebase main

Ramping Up
1. Detach yo' HEAD
$git checkout C4
2. Relative Refs (^)
$ git checkout HEAD^ ; $ git checkout C3
3. Relative Refs #2 (~)
$ git branch -f main c6  ; git branch -f bugFix c0 ; git checkout c1
4. Reverses Changes in Git
git reset HEAD^ ; git checkout pushed; git revert HEAD

Moving Work Around
1. Cherry-pick Intro
$ git cherry-pick C3 C4 C7
2. Interactive rebase Intro
$git rebase -i HEAD~4

A Mixed Bag
1. Grabbing Just 1 Commit
$ git rebase -i HEAD~3 ; git branch -f main bugFix
2. Juggling Commits
git rebase -i HEAD~2; git commit --amend; git rebase -i HEAD~2; git branch -f main
3. Juggling Commits #2
git checkout main; git cherry-pick newImage; git commit --amend; git cherry-pick caption
4. Git Tags
$git tag v0 C1; git tag v1 C2; git checkout C2
5. Git Describe

Advanced Topics
1. Rebasing over 9000 times
git rebase main bugFix ; git rebase bugFix side; git rebase side another; git branch -f main another
or
git checkout bugFix; git rebase main;
git checkout side; git rebase bugFix;
git checkout another; git rebase side;
git checkout main; git rebase another
========================================== stop for today
11.03.2022 Task2.6
2. Multiple parents
3. Branch Spaghetti


Remote tab

Push & Pull -- Git Remotes!
1. Clone Intro
2. Remote Branches
3. Git Fetchin'
4. Git pullin'
5. Faking Teamwork
6. Git Pushin'
7. Diverged History
8. Locked Main

To Origin And Beyond -- Advanced Git Remotes!
1. Push Main!
2. Merging with remotes
3. Remote Tracking
4. Git push arguments
5. Git push arguments -- Expanded!
6. Fetch arguments
7. Source of nothing
8. Pull arguments

================================================
https://codegym.cc/
In the Java programming language, a command can't exist on its own. It's part of a function
(in Java, 'functions' are also called 'methods'). A method is part of a class. In other words,
a class is divided into methods and methods are divided into commands."

Programs in Java consist of classes. There might be tens of thousands of classes. A minimal
program is one class. For each class, a separate file is created. The name of the file matches the name of the class.

when you add strings and numbers, the result is always a string

A Java compiler doesn't compile all the classes into one machine-code program. Instead, it compiles every
class independently and, what's more, not into machine code, but into a special intermediate code (bytecode).
The bytecode is compiled into machine code when the program is started.

Today you learned about:
Variables
Displaying text on the screen
int and String types
The difference between compiling in Java and other languages
Adding comments in code and why we need them