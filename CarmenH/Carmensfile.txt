First commit on second repo
din urma==================================================================
14feb2022

$ git pull

-- did not manage anything at sandbox level
--go to
https://learngitbranching.js.org/


-show commands at terminal
-main instead of master ( GitHub default branch )


Introduction to Git Commits:
1.
Care-i scopul a da 2 commituri far add?
"I want to include the work of this commit and all parent commits"

$git switch instead of git checkout
$git checkout -b [yourbranhcname]
$git merge  - special commit that has two unique parents

--combining work rebasing

15feb2022

So you move the HEAD with git checkout {commit name}

Use git log to see the hashes

GIT has relative refs for looong hashes

Moving upwards one commit at a time with ^
Moving upwards a number of times with ~<num>



So saying main^ is equivalent to "the first parent of main".

main^^ is the grandparent (second-generation ancestor) of main


Easy! We can travel backwards in time with HEAD^



To complete this level, check out the parent commit of bugFix. This will detach HEAD.
You can specify the hash if you want, but try using relative refs instead!

$git checkout C4^



===========================================
16feb2022

Git checkout HEAD~4

"You're an expert on relative refs now" :))))


You can directly reassign a branch to a commit with the -f option. So something like:
$git branch -f main HEAD~3
moves (by force) the main branch to three parents behind HEAD.


To complete this level, move HEAD, main, and bugFix to their goal destinations shown.

---reverse changes in git

There are many ways to reverse changes in Git. And just like committing, reversing changes in Git has both a low-level component (staging individual files or chunks) and a high-level component (how the changes are actually reversed). Our application will focus on the latter.

There are two primary ways to undo changes in Git -- one is using git reset and the other is using git revert. We will look at each of these in the next dialog

git reset reverses changes by moving a branch reference backwards in time to an older commit. In this sense you can think of it as "rewriting history;" git reset will move a branch backwards as if the commit had never been made in the first place.
$git reset HEAD~1

While resetting works great for local branches on your own machine, its method of "rewriting history" doesn't work for remote branches that others are using.
In order to reverse changes and share those reversed changes with others, we need to use git revert. Let's see it in action.
$git revert HEAD

To complete this level, reverse the most recent commit on both local and pushed. You will revert two commits total (one per branch).

Keep in mind that pushed is a remote branch and local is a local branch -- that should help you choose your methods.

Understood much much better branching and moving all around
----------
$git cherry-pick
git cherry-pick <Commit1> <Commit2> <...>

$git cherry-pick C2 C4

This takes the commits you want to your ??what
To complete this level, simply copy some work from the three branches shown into main. You can see which commits we want by looking at the goal visualization.

------------
rebase -I

$git rebase -I HEAD~4

To finish this level, do an interactive rebase and achieve the order shown in the goal visualization. Remember you can always undo or reset to fix mistakes :D

You can rearrange those and omit those. Understood now what Dragos asked and Bojte showed

================================================================
17feb2022
Locally stacked commits


Here's a development situation that often happens: I'm trying to track down a bug but it is quite elusive. In order to aid in my detective work, I put in a few debug commands and a few print statements.

All of these debugging / print statements are in their own commits. Finally I track down the bug, fix it, and rejoice!

Only problem is that I now need to get my bugFix back into the main branch. If I simply fast-forwarded main, then main would get all my debug statements which is undesirable. There has to be another way...

git rebase -i
git cherry-pick

This is a later level so we will leave it up to you to decide which command you want to use, but in order to complete the level, make sure main receives the commit that bugFix references.

$git rebase -I HEAD~3
$git branch -f main HEAD
----------
Part 2 today
Juggling Commits
Here's another situation that happens quite commonly. You have some changes (newImage) and another set of changes (caption) that are related, so they are stacked on top of each other in your repository (aka one after another).

The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of newImage slightly, even though that commit is way back in our history!!

We will overcome this difficulty by doing the following:

We will re-order the commits so the one we want to change is on top with git rebase -i
We will git commit --amend to make the slight modification
Then we will re-order the commits back to how they were previously with git rebase -i
Finally, we will move main to this updated part of the tree to finish the level (via the method of your choosing)
There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique. Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree

That being said, I can compare levels now based on structure and relative apostrophe differences. As long as your tree's main branch has the same structure and relative apostrophe differences, I'll give full credit.

git rebase -i main
git commit --amend
git rebase -i main
git branch -f main HEAD
din urma=================================================================


18feb2022
https://learngitbranching.js.org/

----------------------------------------------------------------------------
A Mixed Bag
4

description:
As you have learned from previous lessons, branches are easy to move around and often refer to different commits
as work is completed on them. Branches are easily mutated, often temporary, and always changing.

If that's the case, you may be wondering if there's a way to permanently mark historical points in your project's history.
For things like major releases and big merges, is there any way to mark these commits with something more permanent than a branch?

You bet there is! Git tags support this exact use case -- they (somewhat)
permanently mark certain commits as "milestones" that you can then reference like a branch.

More importantly though, they never move as more commits are created.
You can't "check out" a tag and then complete work on that tag -- tags exist as anchors in the commit tree that designate certain spots.

Let's see what tags look like in practice.

Let's try making a tag at C1 which is our version 1 prototype.
$git tag v1 C1
There! Quite easy. We named the tag v1 and referenced the commit C1 explicitly. If you leave the commit off, git will just use whatever HEAD is at.

For this level just create the tags in the goal visualization and then check v1 out. Notice how you go into detached HEAD state -- this is because you can't commit directly onto the v1 tag.
In the next level we'll examine a more interesting use case for tags.

solution:
$ git tag v1 C2
$ git tag v0 C1
$ git checkout C2

----------------------------------------------------------------------------
A Mixed Bag
5

Git Describe
Because tags serve as such great "anchors" in the codebase,
git has a command to describe where you are relative to the closest "anchor" (aka tag). And that command is called git describe!
Git describe can help you get your bearings after you've moved many commits backwards or forwards in history;
this can happen after you've completed a git bisect (a debugging search) or when sitting down at a coworkers computer who just got back from vacation.

Git describe takes the form of:
git describe <ref>
Where <ref> is anything git can resolve into a commit. If you don't specify a ref, git just uses where you're checked out right now (HEAD).
The output of the command looks like:
<tag>_<numCommits>_g<hash>
Where tag is the closest ancestor tag in history, numCommits is how many commits away that tag is, and <hash> is the hash of the commit being described.

Let's look at a quick example. For this tree below:
$ git tag v2 C3

The command git describe main would output:
v1_2_gC2
Whereas git describe side would output:
v2_1_gC4
That's pretty much all there is to git describe! Try describing a few of the locations in this level to get a feel for the command.
Once you're ready, just go ahead and commit once to finish the level. We're giving you a freebie :P

solution:
freestyle with git describe <commit>
to end git commit

----------------------------------------------------------------------------
Advanced Topics
Rebasing over 9000 times
1

Rebasing Multiple Branches
Man, we have a lot of branches going on here! Let's rebase all the work from these branches onto main.
Upper management is making this a bit trickier though -- they want the commits to all be in sequential order.
So this means that our final tree should have C7' at the bottom, C6' above that, and so on, all in order.
If you mess up along the way, feel free to use reset to start over again. Be sure to check out our solution and see if you can do it in fewer commands!



solution:
$ git checkout bugFix
$ git rebase -i main
$ git checkout side
$ git rebase -i bugFix
$ git checkout another
$ git rebase -i c6'
$ git branch -f main HEAD
=============================================================
21feb2022

Specifying Parents
Like the ~ modifier, the ^ modifier also accepts an optional number after it.

Rather than specifying the number of generations to go back (what ~ takes),
 the modifier on ^ specifies which parent reference to follow from a merge commit.
 Remember that merge commits have multiple parents, so the path to choose is ambiguous.

Git will normally follow the "first" parent upwards from a merge commit,
 but specifying a number with ^ changes this default behavior.

Enough talking, let's see it in action.

Here we have a merge commit. If we checkout main^ without the modifier, we will follow the first parent after the merge commit.
(In our visuals, the first parent is positioned directly above the merge commit.)
$ git checkout main^
Easy -- this is what we are all used to.

Now let's try specifying the second parent instead...
$ git checkout main^2
See? We followed the other parent upwards.

The ^ and ~ modifiers can make moving around a commit tree very powerful:
$ git checkout HEAD~; git checkout HEAD~2; git checkout HEAD~2
Even crazier, these modifiers can be chained together! Check this out:
$ git checkout HEAD~^2~2
The same movement as before, but all in one command.

Put it to practice
To complete this level, create a new branch at the specified destination.
Obviously it would be easy to specify the commit directly (with something like C6), but I challenge you to use the modifiers we talked about instead!

solution:
$ git checkout HEAD~^2~1
$ git branch bugWork
$ git checkout main

second solution
$ git branch bugWork HEAD~^2~
----------------------------------------
WOAHHHhhh Nelly! We have quite the goal to reach in this level.

Here we have main that is a few commits ahead of branches one two and three.
For whatever reason, we need to update these three other branches with modified versions of the last few commits on main.

Branch one needs a re-ordering of those commits and an exclusion/drop of C5.
Branch two just needs a pure reordering of the commits, and three only needs one commit transferred!

We will let you figure out how to solve this one -- make sure to check out our solution afterwards with show solution.
$ git checkout one
$ git cherry-pick c4 c3 c2
$ git checkout two
$ git cherry-pick c5 c4 c3 c2
$ git branch -f three c2
----------------------------------------
$ git clone
Remote branches have the special property that when you check them out,
you are put into detached HEAD mode. Git does this on purpose because you can't work on these branches directly;
you have to work elsewhere and then share your work with the remote (after which your remote branches will be updated).

What is o/?
You may be wondering what the leading o/ is for on these remote branches.
Well, remote branches also have a (required) naming convention -- they are displayed in the format of:
<remote name>/<branch name>
Hence, if you look at a branch named o/main, the branch name is main and the name of the remote is o.
Most developers actually name their main remote origin, not o. This is so common that git actually sets
up your remote to be named origin when you git clone a repository.

Unfortunately the full name of origin does not fit in our UI, so we use o as shorthand :(
Just remember when you're using real git, your remote is probably going to be named origin!

That's a lot to take in, so let's see all this in action.

$ git checkout o/main ; git commit
As you can see, git put us into detached HEAD mode and then did not update o/main when we added a new commit.
This is because o/main will only update when the remote updates.

To finish this level, commit once off of main and once after checking out o/main.
This will help drive home how remote branches behave differently, and they only update to reflect the state of the remote.

solution
$ git commit
$ git checkout o/main
$ git commit

-----------------------------
In this lesson we will learn how to fetch data from a remote repository -- the command for this is conveniently named git fetch.

You'll notice that as we update our representation of the remote repository,
our remote branches will update to reflect that new representation. This ties into the previous lesson on remote branches.

$ git fetch
There we go! Commits C2 and C3 were downloaded to our local repository, and our remote branch o/main was updated to reflect this.

What fetch does
git fetch performs two main steps, and two main steps only. It:
downloads the commits that the remote has but are missing from our local repository, and...
updates where our remote branches point (for instance, o/main)

git fetch essentially brings our local representation of the remote repository
into synchronization with what the actual remote repository looks like (right now).

If you remember from the previous lesson, we said that remote branches reflect the state of the remote
repositories since you last talked to those remotes. git fetch is the way you talk to these remotes! Hopefully
the connection between remote branches and git fetch is apparent now.

git fetch usually talks to the remote repository through the Internet (via a protocol like http:// or git://).

What fetch doesn't do
git fetch, however, does not change anything about your local state.
It will not update your main branch or change anything about how your file system looks right now.

This is important to understand because a lot of developers think that
running git fetch will make their local work reflect the state of the remote.
It may download all the necessary data to do that, but it does not actually change
any of your local files. We will learn commands in later lessons to do just that :D

So at the end of the day, you can think of running git fetch as a download step.
solution
$ git fetch

------------
git pull
Now that we've seen how to fetch data from a remote repository with git fetch, let's update our work to reflect those changes!
There are actually many ways to do this -- once you have new commits available locally,
you can incorporate them as if they were just normal commits on other branches. This means you could execute commands like:

git cherry-pick o/main
git rebase o/main
git merge o/main
etc., etc.
In fact, the workflow of fetching remote changes and then merging them is so common that git actually
provides a command that does both at once! That command is git pull.

Let's first see a fetch and a merge executed sequentially.
$ git fetch; git merge o/main
$ git pull instead
these 2 make the same thing. That should make it very clear that git pull is essentially
shorthand for a git fetch followed by a merge of whatever branch was just fetched.
solution:
$ git pull
-----------------------------------------
$ git fakeTeamwork foo 3 ---3 commituri o data
solutin
git clone
git fakeTeamwork 2
git commit
git pull
-------------------------
git push
note -- the behavior of git push with no arguments varies
depending on one of git's settings called push.default. The default value for this setting depends on
the version of git you're using, but we are going to use the upstream value in our lessons.
This isn't a huge deal, but it's worth checking your settings before pushing in your own projects.

solution
$ git commit
$ git commit
$ git push
------------------------
22feb2022

deviated commit history
So far we've seen how to pull down commits from others and how to push up our own changes. It seems pretty simple, so how can people get so confused?
The difficulty comes in when the history of the repository diverges. Before discussing the details of this, let's see an example...

See? Nothing happened because the command fails.
git push fails because your most recent commit C3 is based off of the remote at C1.
The remote has since been updated to C2 though, so git rejects your push.
How do you resolve this situation? It's easy, all you need to do is base your work off of the most recent version of the remote branch.
There are a few ways to do this, but the most straightforward is to move your work via rebasing. Let's go ahead and see what that looks like.

$git fetch; git rebase o/main; git push
Boom! We updated our local representation of the remote with git fetch,
rebased our work to reflect the new changes in the remote, and then pushed them with git push.

Are there other ways to update my work when the remote repository has been updated?
Of course! Let's check out the same thing but with merge instead.
Although git merge doesn't move your work (and instead just creates a merge commit),
it's a way to tell git that you have incorporated all the changes from the remote.
This is because the remote branch is now an ancestor of your own branch, meaning your commit reflects all commits in the remote branch.

Lets see this demonstrated...
$ git fetch; git merge o/main; git push
Boom! We updated our local representation of the remote with git fetch,
merged the new work into our work (to reflect the new changes in the remote), and then pushed them with git push.

Awesome! Is there any way I can do this without typing so many commands?
Of course -- you already know git pull is just shorthand for a fetch and a merge. Conveniently enough, git pull --rebase is shorthand for a fetch and a rebase!
Let's see these shorthand commands at work.
$ git pull --rebase; git push
$ git pull; git push

In order to solve this level, take the following steps:
Clone your repo
Fake some teamwork (1 commit)
Commit some work yourself (1 commit)
Publish your work via rebasing

solution:
$ git clone
$ git fakeTeamwork 1
$ git commit
$ git pull --rebase
$ git push
-------------------------------------------------------
Remote rejected
If you work on a large collaborative team it's likely that main is locked and requires
some Pull Request process to merge changes. If you commit directly to main locally and try pushing you will be greeted with a message similar to this:

! [remote rejected] main -> main (TF402455: Pushes to this branch are not permitted; you must use a pull request to update this branch.)

The remote rejected the push of commits directly to main because of the policy on main requiring pull requests to instead be used.
You meant to follow the process creating a branch then pushing that branch and doing a pull request,
but you forgot and committed directly to main. Now you are stuck and cannot push your changes.

Create another branch called feature and push that to the remote.
Also reset your main back to be in sync with the remote otherwise you may have issues
next time you do a pull and someone else's commit conflicts with yours.
solution
git reset --hard o/main
git checkout -b feature C2
git push origin feature

-------------------------------------------------------
merging feature branches

$git pull --rebase; git push
We executed two commands here that:
rebased our work onto new commits from remote, and
published our work to the remote

This level is pretty hefty -- here is the general outline to solve:

There are three feature branches -- side1 side2 and side3
We want to push each one of these features, in order, to the remote
The remote has since been updated, so we will need to incorporate that work as well
:O intense! good luck, completing this level is a big step.

solution
$ git fetch
$ git rebase o/main side1
$ git rebase side1 side2
$ git rebase side2 side3
$ git rebase side3 main
$ git push
------------------------------------------------------------
23feb2022

To Origin And Beyond -- Advanced Git Remotes!
2. Merging with remotes

In order to push new updates to the remote,all you need to do is incorporate the latest changes from the remote.
That means you can either rebase or merge in the remote branch (e.g. o/main).
So if you can do either method, why have the lessons focused on rebasing so far? Why is there no love for merge when working with remotes?

There's a lot of debate about the tradeoffs between merging and rebasing in the development community. Here are the general pros / cons of rebasing:

Pros:
Rebasing makes your commit tree look very clean since everything is in a straight line
Cons:
Rebasing modifies the (apparent) history of the commit tree.
For example, commit C1 can be rebased past C3. It then appears that the work for C1'
came after C3 when in reality it was completed beforehand.

Some developers love to preserve history and thus prefer merging.
Others (like myself) prefer having a clean commit tree and prefer rebasing. It all comes down to preferences :D

For this level, let's try to solve the previous level but with merging instead. It may get a bit hairy but it illustrates the point well.

solutiom:
$ git checkout main
$ git pull origin main   --- aduc din remote ce nu am ...imediat dupa main
$ git merge side1
$ git merge side2
$ git merge side3
$ git push origin main

---------------------------------------------------------
3.Remote Tracking

Remote-Tracking branches
One thing that might have seemed "magical" about the last few lessons is that git knew the main branch
was related to o/main. Sure these branches have similar names and it might make logical sense to connect
the main branch on the remote to the local main branch, but this connection is demonstrated clearly in two scenarios:

During a pull operation, commits are downloaded onto o/main and then merged into the main branch.
The implied target of the merge is determined from this connection.
During a push operation, work from the main branch was pushed onto the remote's main branch
(which was then represented by o/main locally). The destination of the push is determined from the connection between main and o/main.

Long story short, this connection between main and o/main is explained simply by the "remote tracking" property of branches.
The main branch is set to track o/main -- this means there is an implied merge target and implied push destination for the main branch.
You may be wondering how this property got set on the main branch when you didn't run any commands to specify it.
Well, when you clone a repository with git, this property is actually set for you automatically.
During a clone, git creates a remote branch for every branch on the remote (aka branches like o/main).
It then creates a local branch that tracks the currently active branch on the remote, which is main in most cases.
Once git clone is complete, you only have one local branch (so you aren't overwhelmed) but you can see all
the different branches on the remote (if you happen to be very curious). It's the best of both worlds!
This also explains why you may see the following command output when cloning:
local branch "main" set to track remote branch "o/main"


Can I specify this myself?
Yes you can! You can make any arbitrary branch track o/main, and if you do so, that branch will have the same
implied push destination and merge target as main. This means you can run git push on a branch named totallyNotMain
and have your work pushed to the main branch on the remote!
There are two ways to set this property. The first is to checkout a new branch by using a remote branch as the specified ref. Running
$git checkout -b totallyNotMain o/main
Creates a new branch named totallyNotMain and sets it to track o/main.

Enough talking, let's see a demonstration! We will checkout a new branch named foo and set it to track main on the remote.
$ git checkout -b foo o/main; git pull
As you can see, we used the implied merge target of o/main to update the foo branch. Note how main doesn't get updated!!
$ git checkout -b foo o/main; git commit; git push
Boom. We pushed our work to the main on the remote even though our branch was named something totally different.


Way #2
Another way to set remote tracking on a branch is to simply use the git branch -u option. Running
$ git branch -u o/main foo
will set the foo branch to track o/main. If foo is currently checked out you can even leave it off:
$ git branch -u o/main

$ git branch -u o/main foo; git commit; git push
Same as before, just a more explicit command. Sweet!


Ok! For this level let's push work onto the main branch
on remote while not checked out on main locally. I'll let you figure out the rest since this is the advanced course :P

intrebare ca nu am inteles!!!!
solution:
$ git checkout -b side o/main / git branch -f side main
$ git commit
$ git pull --rebase
$ git push
==========================================================
24feb2022

4.
Push arguments
Great! Now that you know about remote tracking branches we can start to uncover some of the mystery
behind how git push, fetch, and pull work. We're going to tackle one command at a time but the concepts between them are very similar.

First we'll look at git push. You learned in the remote tracking lesson that git figured out the remote and the branch
to push to by looking at the properties of the currently checked out branch (the remote that it "tracks").
This is the behavior with no arguments specified, but git push can optionally take arguments in the form of:

$ git push <remote> <place>

What is a <place> parameter you say? We'll dive into the specifics soon, but first an example. Issuing the command:

$ git push origin main
translates to this in English:
Go to the branch named "main" in my repository, grab all the commits, and then go to the branch "main" on the remote
named "origin". Place whatever commits are missing on that branch and then tell me when you're done.
By specifying main as the "place" argument, we told git where the commits will come from and where the commits will go.
It's essentially the "place" or "location" to synchronize between the two repositories.
Keep in mind that since we told git everything it needs to know (by specifying both arguments), it totally ignores where we are checked out!

$ git checkout C0; git push origin main
There we go! main got updated on the remote since we specified those arguments.

$git checkout C0; git push
The command fails (as you can see), since HEAD is not checked out on a remote-tracking branch.

Ok, for this level let's update both foo and main on the remote. The twist is that git checkout is disabled for this level!
Note: The remote branches are labeled with o/ prefixes because the full origin/ label does not fit in our UI.
Don't worry about this... simply use origin as the name of the remote like normal.

solution
$ git push origin main
$ git push origin foo

--------------------------------------------------------
<place> argument details
Remember from the previous lesson that when we specified main as the place argument for git push,
we specified both the source of where the commits would come from and the destination of where the commits would go.

You might then be wondering -- what if we wanted the source and destination to be different?
What if you wanted to push commits from the foo branch locally onto the bar branch on remote?

In order to specify both the source and the destination of <place>, simply join the two together with a colon:
git push origin <source>:<destination>
This is commonly referred to as a colon refspec. Refspec is just a fancy name for a location that git can figure out (like the branch foo or even just HEAD~1).
Once you are specifying both the source and destination independently, you can get quite fancy and precise with remote commands. Let's see a demo!
$ git push origin foo^:main
Woah! That's a pretty trippy command but it makes sense -- git resolved foo^ into a location,
uploaded whatever commits that weren't present yet on the remote, and then updated destination.

$git push origin main:newBranch
For this level, try to get to the end goal state shown in the visualization, and remember the format of:
<source>:<destination>

solutin:
$ git push origin foo:main
$ git push origin main^:foo

--------------------------------------------------------------------------
Git fetch arguments
So we've just learned all about git push arguments, this cool <place> parameter, and even colon refspecs
(<source>:<destination>). Can we use all this knowledge for git fetch as well?
You betcha! The arguments for git fetch are actually very, very similar to those for git push.
It's the same type of concepts but just applied in the opposite direction (since now you are downloading commits rather than uploading).
Let's go over the concepts one at a time...

The <place> parameter
If you specify a place with git fetch like in the following command:
$ git fetch origin foo
Git will go to the foo branch on the remote, grab all the commits that aren't present locally, and then plop them down onto the o/foo branch locally.
Let's see this in action (just as a refresher).
$ git fetch origin foo
We download only the commits from foo and place them on o/foo.
You might be wondering -- why did git plop those commits onto the o/foo remote branch rather than just plopping them
onto my local foo branch? I thought the <place> parameter is a place that exists both locally and on the remote?

Well git makes a special exception in this case because you might have work on the foo branch that you don't want
to mess up!! This ties into the earlier lesson on git fetch -- it doesn't update your local non-remote branches,
it only downloads the commits (so you can inspect / merge them later).

"Well in that case, what happens if I explicitly define both the source and destination with <source>:<destination>?"
If you feel passionate enough to fetch commits directly onto a local branch,
then yes you can specify that with a colon refspec. You can't fetch commits onto a branch that is checked out, but otherwise git will allow this.
Here is the only catch though -- <source> is now a place on the remote and <destination>
is a local place to put those commits. It's the exact opposite of git push, and that makes sense since we are transferring data in the opposite direction!
That being said, developers rarely do this in practice. I'm introducing it mainly as a way to
conceptualize how fetch and push are quite similar, just in opposite directions.

$git fetch origin foo~1:bar
Wow! See, git resolved foo~1 as a place on the origin and then downloaded those commits to bar
(which was a local branch). Notice how foo and o/foo were not updated since we specified a destination.

Ok, enough talking! To finish this level, fetch just the specified commits in the goal visualization. Get fancy with those commands!
You will have to specify the source and destination for both fetch commands. Pay attention to the goal visualization since the IDs may be switched around!

solution:
$ git fetch origin main^:foo
$ git fetch origin foo:main
$ git checkout foo
$ git merge main

---------------------------------------------------------------------------------
Oddities of <source>
Git abuses the <source> parameter in two weird ways.
These two abuses come from the fact that you can technically specify "nothing" as a valid source for both git push and git fetch.
The way you specify nothing is via an empty argument:

git push origin :side
git fetch origin :bugFix
Let's see what these do...

$git push origin :foo
There, we successfully deleted the foo branch on remote by pushing the concept of "nothing" to it. That kinda makes sense...

Finally, fetching "nothing" to a place locally actually makes a new branch.
$git fetch origin :bar
Very odd / bizarre, but whatever. That's git for you!

This is a quick level -- just delete one remote branch and create a new branch with git fetch to finish!

solution:
$git push origin :foo
$git fetch origin :bar
---------------------------------------------------------------------------------
Git pull arguments
Now that you know pretty much everything there is to know about arguments for git
fetch and git push, there's almost really nothing left to cover for git pull :)
That's because git pull at the end of the day is really just shorthand for a fetch
followed by merging in whatever was just fetched. You can think of it as running git fetch with the
same arguments specified and then merging in where those commits ended up.

This applies even when you use crazy-complicated arguments as well. Let's see some examples:
Here are some equivalent commands in git:

git pull origin foo is equal to:
git fetch origin foo; git merge o/foo
And...
git pull origin bar~1:bugFix is equal to:
git fetch origin bar~1:bugFix; git merge bugFix

See? git pull is really just shorthand for fetch + merge, and all git pull
cares about is where the commits ended up (the destination argument that it figures out during fetch).

Lets see a demo:

$ git pull origin main
See! by specifying main we downloaded commits onto o/main just as normal. Then we merged o/main to our currently checked
out location which is not the local branch main.
For this reason it can actually make sense to run git pull multiple times (with the same args) from different locations
in order to update multiple branches.

$ git pull origin main:foo
Wow, that's a TON in one command. We created a new branch locally named foo, downloaded
commits from remote's main onto that branch foo, and then merged that branch into our currently checked out branch bar. It's over 9000!!!

Ok to finish up, attain the state of the goal visualization.
You'll need to download some commits, make some new branches, and merge those branches into other branches, but it shouldn't take many commands :P

solution:
$ git pull origin bar:foo
$ git pull origin main:side

yey...done with game number 2


========================================================
25feb2022


https://www.alpha-epsilon.de/programming/2017/11/09/my-git-cheatsheet/


https://git-scm.com/about

Branching and Merging
The Git feature that really makes it stand apart from nearly every other SCM out there is its branching model.

Git allows and encourages you to have multiple local branches that can be entirely
independent of each other. The creation, merging, and deletion of those lines of development takes seconds.

This means that you can do things like:

Frictionless Context Switching. Create a branch to try out an idea, commit a few times,
switch back to where you branched from, apply a patch, switch back to where you are experimenting, and merge it in.

Role-Based Codelines. Have a branch that always contains only what goes to production,
another that you merge work into for testing, and several smaller ones for day to day work.

Feature Based Workflow. Create new branches for each new feature you're working on so you can
seamlessly switch back and forth between them, then delete each branch when that feature gets merged into your main line.

Disposable Experimentation. Create a branch to experiment in, realize it's not going to work,
and just delete it - abandoning the work—with nobody else ever seeing it (even if you've pushed other branches in the meantime).

Notably, when you push to a remote repository, you do not have to push all of your branches.
ou can choose to share just one of your branches, a few of them, or all of them. This tends to free
people to try new ideas without worrying about having to plan how and when they are going to merge it in or share it with others.

There are ways to accomplish some of this with other systems, but the work involved is much more difficult
and error-prone. Git makes this process incredibly easy and it changes the way most developers work when they learn it.
